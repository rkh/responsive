@use "functions" as *;
@use "config" as *;
@use "utils/state";
@use "utils/layers";

/// Generates a `min-width` media query for a given breakpoint. If the smallest breakpoint is used,
/// the content will be returned without a media query.
/// 
/// @example scss Input
///   .example {
///     @include responsive.breakpoint("sm") { width: 100%; }
///     @include responsive.breakpoint("md", $and-up: true) { width: 50%; } 
///   }
/// 
/// @example css Output
///    @media (min-width: 36em) {
///      @media not all and (min-width: 48em) {
///        .example {
///          width: 100%;
///        }
///      }
///    }
///    @media (min-width: 48em) {
///      .example {
///        width: 50%;
///      }
///    }
@mixin breakpoint($input, $and-up: false, $use-layers: null) {
  $next-breakpoint: null;
  @if not $and-up {
    $next-breakpoint: next-breakpoint($input);
  }

  @include state.with-breakpoint($input, $and-up) {
    @include -media-query($input, $next-breakpoint) {
      @include layers.with-layer($use-layers) {
        @content;
      }
    }
  }
}


/// Mixin to set defaults for properties that can be overridden by the `breakpoint` mixin.
///
/// @example scss Input
///   .example {
///     @include responsive.breakpoint("sm") {
///       color: green;
///     }
///     @include responsive.defaults {
///       color: red;
///     }
///   }
///   
///   .my-other-example {
///     color: blue; // no !important needed
///   }
/// 
/// @example css Output
///   @media (min-width: 36em) {
///     @media not all and (min-width: 48em) {
///       @layer responsive.bp-sm {
///         .example {
///           color: green;
///         }
///       }
///     }
///   }
///   
///   @layer responsive.base {
///     .example {
///       color: red;
///     }
///   }
///   
///   .my-other-example {
///     color: blue;
///   }
@mixin defaults($use-layers: null) {
  @if layers.use-layers($use-layers) {
    @include layers.with-base-layer {
      @content;
    }
  } @else {
    @content;
  }
}

/// A shorthand for using `breakpoint` and `defaults` together for a single property.
///
/// @example scss Input
///   .example {
///     @include responsive.property("color", red, (sm: green));
///   }
@mixin property($property, $default: null, $breakpoints, $use-layers: null, $and-up: false) {
  @if $default != null {
    @include defaults($use-layers) { #{$property}: $default; }
  }
  @each $breakpoint, $value in $breakpoints {
    @include breakpoint($breakpoint, $and-up: $and-up, $use-layers: $use-layers) {
      #{$property}: $value;
    }
  }
}

// Always combine with state.with-breakpoint and layers.with-layer.
@mixin -media-query($from, $to: null) {
  $min-width: responsive-width($from, "em", $first-zero: true);
  @media (min-width: $min-width) {
    @if $to == null {
      @content;
    } @else {
      $max-width: responsive-width($to, "em");
      @media not all and (min-width: $max-width) {
        @content;
      }
    }
  }
}